<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.swm.board.mapper.ListMapper">
    <resultMap id="placeResultMap" type="kr.co.swm.board.list.model.DTO.ListDTO">
        <result column="ACCOMMODATION_ADMIN_NO" property="boardNo"></result>
        <result column="NAME" property="boardName"></result>
        <result column="ACCOMMODATION_TYPE" property="boardType"></result>
        <result column="POST_NO" property="boardAddress"></result>
        <result column="CHECK_IN_TIME" property="boardCheckIn"></result>
        <result column="BASIC_RATE" property="boardCount"></result>
    </resultMap>


    <!-- 장소 -->
    <select id="getPlace" resultMap="placeResultMap">
            SELECT ab.ACCOMMODATION_NO,
                ab.NAME,
                ab.ACCOMMODATION_TYPE,
                ab.POST_NO,
                r.CHECK_IN_TIME,
                MIN(br.BASIC_RATE) as BASIC_RATE
        FROM (SELECT a.ACCOMMODATION_NO,
                    a.NAME,
                    a.ACCOMMODATION_TYPE,
                    a.POST_NO
                FROM facilities f
                JOIN accommodation a ON a.ACCOMMODATION_NO = f.ACCOMMODATION_NO
                <if test="searchDTO.options != null and searchDTO.options.size() > 0">
                    WHERE f.FACILITY_NAME IN
                    <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">
                        #{option}
                    </foreach>
                </if>
            ) ab
        JOIN room r ON ab.ACCOMMODATION_NO = r.ACCOMMODATION_NO
        JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO
        <if test='!searchDTO.type.equals("전체")'>
            WHERE ab.ACCOMMODATION_TYPE = #{searchDTO.type}
        </if>
        GROUP BY ab.name, ab.accommodation_Type, ab.post_no, r.CHECK_IN_TIME, r.ACCOMMODATION_NO
        HAVING MIN(basic_rate) BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate}
        ORDER BY ab.ACCOMMODATION_NO
        LIMIT #{pi.boardLimit} OFFSET #{pi.offset}

    </select>

    <!-- 별점 평균 -->
    <select id="getAvgRate" resultType="double">
        SELECT COALESCE(ROUND(AVG(r2.rating), 1), 0) AS avgRate
        FROM room r
        JOIN review r2 ON r.ROOM_NO = r2.ROOM_NO
        where r.ACCOMMODATION_NO = #{boardNo}
    </select>

    <!-- 게시글의 총 개수 -->
    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*) FROM (
            SELECT ab.NAME,
                    ab.ACCOMMODATION_TYPE,
                    ab.POST_NO,
                    r.CHECK_IN_TIME,
                    MIN(br.BASIC_RATE)
            FROM (SELECT a.ACCOMMODATION_NO,
                        a.NAME,
                        a.ACCOMMODATION_TYPE,
                        a.POST_NO
                    FROM facilities f
                    JOIN accommodation a ON a.ACCOMMODATION_NO = f.FACILITY_NO
                    <if test="searchDTO.options != null and searchDTO.options.size() > 0">
                        WHERE f.FACILITY_NAME IN
                        <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">
                            #{option}
                        </foreach>
                    </if>) ab
            JOIN room r ON ab.ACCOMMODATION_NO = r.ACCOMMODATION_NO
            JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO
            <if test='!searchDTO.type.equals("전체")'>
                WHERE ab.ACCOMMODATION_TYPE = #{searchDTO.type}
            </if>
            group by ab.name, ab.accommodation_Type, ab.post_no, r.CHECK_IN_TIME, r.ACCOMMODATION_NO
            HAVING (MIN(basic_rate) BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate})
    ) a

<!--        SELECT COUNT(*) FROM accommodation a-->
<!--        JOIN facilities f ON a.ACCOMMODATION_NO = f.ACCOmMODATION_NO-->
<!--        JOIN room r ON a.ACCOMMODATION_NO = r.ACCOMMODATION_NO-->
<!--        JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO-->
<!--        <choose>-->
<!--            <when test='!searchDTO.type.equals("전체")'>-->
<!--                WHERE ACCOMMODATION_TYPE = #{searchDTO.type}-->
<!--                AND (basic_rate BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate})-->
<!--                <if test="searchDTO.options != null and searchDTO.options.size() > 0">-->
<!--                    AND f.fality_name IN-->
<!--                    <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">-->
<!--                        #{option}-->
<!--                    </foreach>-->
<!--                </if>-->
<!--            </when>-->
<!--            <when test="searchDTO.options != null">-->
<!--                WHERE f.fality_name IN-->
<!--                <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">-->
<!--                    #{option}-->
<!--                </foreach>-->
<!--                AND (basic_rate BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate})-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                WHERE (basic_rate BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate})-->
<!--            </otherwise>-->
<!--        </choose>-->

<!--
    1. 유형만 검색했을 떄
    2. 가격만 검색했을 떄
    3. 옵션만 검색헀을 떄
    4. 전체 선택 후 검색했을 때
-->
    </select>

    <!-- 최저 기본 가격 -->
    <select id="getCost" resultMap="placeResultMap">
        select distinct basic_rate_no,basic_rate from BASIC_RATE
        where basic_rate_no = 1
    </select>

</mapper>
